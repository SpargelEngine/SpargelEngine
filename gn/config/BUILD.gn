import("//gn/config/sysroot.gni")
import("//gn/config/coverage.gni")
import("//gn/config/win_sdk.gni")
import("//gn/config/msvc.gni")

config("basics") {
    cflags = []
    cflags_cc = []
    cflags_objcc = []
    ldflags = []
    include_dirs = []
    libs = []
    lib_dirs = []

    if (is_msvc) {

    } else {
        cflags += [ "-fcolor-diagnostics" ]
        #ldflags += [
        #    "-fuse-ld=lld",
        #    "-Wl,--color-diagnostics",
        #]
    }

    include_dirs = [
        "//source",
        "$root_gen_dir/source",
    ]

    if (is_msvc) {
        wininc = "$win_sdk_base_path\\Include\\$win_sdk_version"
        winlib = "$win_sdk_base_path\\Lib\\$win_sdk_version"

        include_dirs += [
            "$msvc_base_path\\include",
            "$wininc\\ucrt",
            "$wininc\\um",
            "$wininc\\shared",
        ]
        lib_dirs += [
            "$msvc_base_path\\lib\\x64",
            "$winlib\\um\\x64",
            "$winlib\\ucrt\\x64",
        ]
        libs += [
            "user32.lib",
        ]
    }

    if (is_msvc) {
        cflags_cc += [ "/std:c++20" ]
    } else {
        cflags += [ "-O0" ]

        cflags += [ "-std=c11" ]
        cflags_cc += [ "-std=c++20" ]
        cflags_objcc += [ "-std=c++20" ]

        cflags_cc += [ "-fno-exceptions" ]
        cflags_cc += [ "-fno-rtti" ]
    }

    if (is_macos) {
        sysroot_flags = [
            "-isysroot",
            rebase_path(sysroot, root_build_dir),
        ]
        cflags += sysroot_flags
        ldflags += sysroot_flags
    }
}

config("warnings") {
    if (is_msvc) {

    } else {
        cflags = [
            "-pedantic-errors",
            "-Wall",
            "-Wextra",
            "-Wconversion",
            "-Werror",
        ]
    }
}

config("default_optimize") {
    cflags = []
    if (!is_debug) {
        if (is_msvc) {

        } else {
            cflags += [
                "-O2",
            ]
        }
    }
}

config("default_coverage") {
    cflags = []
    ldflags = []

    if (enable_clang_coverage) {
        # TODO:
        assert(!is_msvc)
        cflags += [
            "-fprofile-instr-generate",
            "-fcoverage-mapping",
        ]
        ldflags += [
            "-fprofile-instr-generate",
        ]
    }
}
