import argparse
import subprocess
from pathlib import Path

parser = argparse.ArgumentParser()
parser.add_argument("--gen-dir", type=Path)
parser.add_argument("--output-base", type=Path)
parser.add_argument("--target-name")
parser.add_argument("--namespace")
parser.add_argument("--var-name")
parser.add_argument("--compile", action="append", nargs=2)
args = parser.parse_args()

lib_file = args.gen_dir / args.output_base / (args.target_name + '.metallib')
h_file = args.gen_dir / args.output_base / (args.target_name + '.h')
cpp_file = args.gen_dir / args.output_base / (args.target_name + '.cpp')

ir_files = []

# Compile.
for compile_pair in args.compile:
    source, target = compile_pair
    target = args.gen_dir / args.output_base / target
    print(f"COMPILE {source} --> {target}")
    subprocess.run([
        'xcrun', 'metal', '-o', target, '-c', source, '-std=metal3.2',
    ])
    ir_files.append(target)

# Link.
print(f"LINK {lib_file}")
subprocess.run([
    'xcrun', 'metallib', '-o', lib_file
] + ir_files)

with open(lib_file, "rb") as f:
    bytes = f.read()

with open(h_file, "w") as f:
    f.write("#pragma once\n\n")
    f.write("// Generated by //gn/script/compile_metal.py\n\n")
    f.write("#include \"spargel/base/inline_array.h\"\n")
    f.write("#include \"spargel/base/types.h\"\n\n")
    f.write(f"namespace {args.namespace} {{\n")
    f.write(f"    extern ::spargel::base::InlineArray<::spargel::base::Byte, {len(bytes)}> {args.var_name};\n")
    f.write("}\n")

assert(args.output_base.parts[0] == "source")
adjusted_base = args.output_base.relative_to(*args.output_base.parts[:1])

with open(cpp_file, "w") as f:
    f.write("// Generated by //gn/script/compile_metal.py\n\n")
    f.write(f"#include \"{adjusted_base}/{args.target_name}.h\"\n")
    f.write(f"namespace {args.namespace} {{\n")
    f.write(f"    ::spargel::base::InlineArray<::spargel::base::Byte, {len(bytes)}> {args.var_name} = {{\n        ")

    hex_values = [f"0x{byte:02X}" for byte in bytes]
    bytes_per_line = 16
    c_array_lines = []
    for i in range(0, len(hex_values), bytes_per_line):
        line_segment = hex_values[i:i + bytes_per_line]
        c_array_lines.append(", ".join(line_segment))
    formatted_array = ",\n        ".join(c_array_lines)
    f.write(formatted_array)

    f.write("\n    };\n")
    f.write("}\n")
