#! /usr/bin/env python3

import argparse
import os
import re
import shlex
import sys

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('--output')
  parser.add_argument('--rulename')
  parser.add_argument('--gen-dir')
  parser.add_argument('--definitions')
  args = parser.parse_args()

  # Compute a valid C++ header guard by replacing non valid chars with '_',
  # upper-casing everything and prepending '_' if first symbol is digit.
  header_guard = args.output.upper()
  if header_guard[0].isdigit():
    header_guard = '_' + header_guard
  header_guard = re.sub(r'[^\w]', '_', header_guard)
  header_guard += '_'

  # The actual output file is inside the gen dir.
  output = os.path.join(args.gen_dir, args.output)

  with open(args.definitions, 'r') as def_file:
    defs = shlex.split(def_file.read())
  flags_index = defs.index('--flags')

  # Everything after --flags are flags. true/false are remapped to 1/0,
  # everything else is passed through.
  flags = []
  for flag in defs[flags_index + 1 :]:
    equals_index = flag.index('=')
    key = flag[:equals_index]
    value = flag[equals_index + 1:]

    # Canonicalize and validate the value.
    if value == 'true':
      value = '1'
    elif value == 'false':
      value = '0'
    flags.append((key, str(value)))

  # return Options(output=output,
  #                rulename=cmdline_options.rulename,
  #                header_guard=header_guard,
  #                flags=flags)
  with open(output, 'w') as output_file:
      output_file.write("// Generated by //build/build_flags.py\n")
      if args.rulename:
        output_file.write('// From "' + args.rulename + '"\n')

      # output_file.write(f'#ifndef {header_guard}\n')
      # output_file.write(f'#define {header_guard}\n\n')
      output_file.write('#pragma once\n')
      output_file.write('#include "build/build_flags.h" // IWYU pragma: export\n')
      # Clangd does not detect BUILDFLAG_INTERNAL_* indirect usage, so mark the
      # header as "always_keep" to avoid "unused include" warning.
      # output_file.write('// IWYU pragma: always_keep\n\n')
      for pair in flags:
        output_file.write('#define BUILD_FLAG_INTERNAL_%s() (%s)\n' % pair)

      # output_file.write(f'\n#endif\n')

if __name__ == '__main__':
  sys.exit(main())
